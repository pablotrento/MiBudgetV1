app MiBudget {  wasp: {    version: "^0.12.0"  },  title: "MiBudget",  client: {    rootComponent: import { Layout } from "@src/Layout.jsx"  },  db: {    prisma: {      clientPreviewFeatures: ["extendedWhereUnique"]    }  },  auth: {    userEntity: User,    methods: {      usernameAndPassword: {}    },    onAuthFailedRedirectTo: "/login",    onAuthSucceededRedirectTo: "/"  },  route LoginRoute: { path: "/login", to: LoginPage },  page LoginPage: {    component: import Login from "@src/pages/auth/Login.jsx"  },  route SignupRoute: { path: "/signup", to: SignupPage },  page SignupPage: {    component: import Signup from "@src/pages/auth/Signup.jsx"  },  entity User {=psl    id             Int           @id @default(autoincrement())    connectedUsers String    email          String        @unique    password       String    Transaction    Transaction[]    Bill           Bill[]    Budget         Budget[]    Pet            Pet[]  psl=},  entity Transaction {=psl    id       Int      @id @default(autoincrement())    date     DateTime    amount   Float    category String    payee    String    user     User     @relation(fields: [userId], references: [id])    userId   Int  psl=},  entity Bill {=psl    id      Int      @id @default(autoincrement())    amount  Float    dueDate DateTime    payer   String    payee   String    user    User     @relation(fields: [userId], references: [id])    userId  Int  psl=},  entity Budget {=psl    id       Int    @id @default(autoincrement())    category String    goal     Float    user     User   @relation(fields: [userId], references: [id])    userId   Int  psl=},  entity Pet {=psl    id               Int    @id @default(autoincrement())    name             String    type             String    budgetCategories String    user             User   @relation(fields: [userId], references: [id])    userId           Int  psl=},  action addTransaction {    fn: import { addTransaction } from "@src/actions.js",    entities: [Transaction]  },  action addBill {    fn: import { addBill } from "@src/actions.js",    entities: [Bill]  },  action setBudget {    fn: import { setBudget } from "@src/actions.js",    entities: [Budget]  },  query getTransactions {    fn: import { getTransactions } from "@src/queries.js",    entities: [Transaction]  },  query getBills {    fn: import { getBills } from "@src/queries.js",    entities: [Bill]  },  query getBudgets {    fn: import { getBudgets } from "@src/queries.js",    entities: [Budget]  },  route LandingRoute: { path: "/", to: LandingPage },  page LandingPage: {    component: import LandingPage from "@src/pages/Landing.jsx",    authRequired: false  },  route DashboardRoute: { path: "/dashboard", to: DashboardPage },  page DashboardPage: {    component: import DashboardPage from "@src/pages/Dashboard.jsx",    authRequired: true  },  route ExpenseTrackingRoute: { path: "/expense-tracking", to: ExpenseTrackingPage },  page ExpenseTrackingPage: {    component: import ExpenseTrackingPage from "@src/pages/ExpenseTracking.jsx",    authRequired: true  },  route BillSplittingRoute: { path: "/bill-splitting", to: BillSplittingPage },  page BillSplittingPage: {    component: import BillSplittingPage from "@src/pages/BillSplitting.jsx",    authRequired: true  },  route SharedBudgetingRoute: { path: "/shared-budgeting", to: SharedBudgetingPage },  page SharedBudgetingPage: {    component: import SharedBudgetingPage from "@src/pages/SharedBudgeting.jsx",    authRequired: true  } }